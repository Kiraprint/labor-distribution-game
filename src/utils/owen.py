def calculate_owen_value(coalition, total_value, player_values):
    """
    Calculate the Owen value for a given coalition.

    Parameters:
    coalition (set): A set of players in the coalition.
    total_value (float): The total value generated by the coalition.
    player_values (dict): A dictionary mapping players to their individual contributions.

    Returns:
    dict: A dictionary mapping players to their Owen values.
    """
    owen_values = {}
    for player in coalition:
        marginal_contribution = total_value - sum(player_values[p] for p in coalition if p != player)
        owen_values[player] = player_values[player] + marginal_contribution / len(coalition)
    
    return owen_values


def distribute_profits(coalitions, total_values, player_values):
    """
    Distribute profits among players based on the Owen value.

    Parameters:
    coalitions (list): A list of coalitions.
    total_values (dict): A dictionary mapping coalitions to their total values.
    player_values (dict): A dictionary mapping players to their individual contributions.

    Returns:
    dict: A dictionary mapping players to their total profits.
    """
    profits = {player: 0 for player in player_values.keys()}
    
    for coalition in coalitions:
        total_value = total_values.get(frozenset(coalition), 0)
        owen_distribution = calculate_owen_value(coalition, total_value, player_values)
        
        for player, value in owen_distribution.items():
            profits[player] += value
    
    return profits